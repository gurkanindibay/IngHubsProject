name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write
  statuses: write

env:
  JAVA_VERSION: '17'

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run tests
      run: mvn clean test
      
    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: |
          target/surefire-reports/*.xml
        job_summary: true
        compare_to_earlier_commit: true
        check_name: "Unit Test Results"
        
    - name: Generate test coverage report
      run: mvn jacoco:report
      
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      if: always()
      with:
        file: ./target/site/jacoco/jacoco.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
        
    - name: Build application
      run: mvn clean compile package -DskipTests
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wallet-service-jar
        path: target/*.jar
        retention-days: 30

  fast-security-scan:
    name: Fast Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
        
    - name: Run Maven Dependency Security Audit
      run: |
        echo "## 🔍 Fast Security Scan Results" >> $GITHUB_STEP_SUMMARY
        
        # Check for known vulnerable dependencies using Maven
        echo "### Maven Dependency Analysis" >> $GITHUB_STEP_SUMMARY
        
        # Use Maven's built-in dependency analysis
        mvn org.apache.maven.plugins:maven-dependency-plugin:3.6.1:analyze-report || {
          echo "⚠️ Dependency analysis found issues" >> $GITHUB_STEP_SUMMARY
        }
        
        # Check for outdated dependencies
        echo "### Dependency Updates Available" >> $GITHUB_STEP_SUMMARY
        mvn versions:display-dependency-updates | grep "\\->" | head -10 >> $GITHUB_STEP_SUMMARY || echo "No updates found" >> $GITHUB_STEP_SUMMARY
        
        echo "✅ Fast security scan completed" >> $GITHUB_STEP_SUMMARY

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Run Security Scan
      run: |
        echo "## 🔒 Security Scan Results" >> $GITHUB_STEP_SUMMARY
        
        # Make security scan script executable
        chmod +x security-scan.sh
        
        # Run security scan and capture output
        set +e  # Don't exit on failure
        ./security-scan.sh
        SCAN_EXIT_CODE=$?
        set -e  # Re-enable exit on failure
        
        # Report results regardless of exit code
        if [ $SCAN_EXIT_CODE -eq 0 ]; then
          echo "✅ All security scans completed successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ Security scans found issues (exit code: $SCAN_EXIT_CODE)" >> $GITHUB_STEP_SUMMARY
          echo "Check the uploaded artifacts for detailed reports" >> $GITHUB_STEP_SUMMARY
        fi
        
        # List any generated reports
        if [ -d "security-reports" ]; then
          echo "### Generated Reports:" >> $GITHUB_STEP_SUMMARY
          ls -la security-reports/ >> $GITHUB_STEP_SUMMARY || echo "No reports generated" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Continue pipeline even if security scan found issues
        # Only fail for critical errors (exit code > 1)
        if [ $SCAN_EXIT_CODE -gt 1 ]; then
          echo "Critical security scan failure"
          exit $SCAN_EXIT_CODE
        fi
        
    - name: Upload Security Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: |
          security-reports/**/*
          target/dependency-check-report.html
          target/site/jacoco/
        retention-days: 30
        if-no-files-found: warn

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
        
    - name: Run code quality checks
      run: |
        echo "## 📊 Code Quality Analysis" >> $GITHUB_STEP_SUMMARY
        
        # Create reports directory
        mkdir -p target/quality-reports
        
        # Run Maven checkstyle with detailed output
        echo "### Checkstyle Results" >> $GITHUB_STEP_SUMMARY
        if mvn help:describe -Dplugin=org.apache.maven.plugins:maven-checkstyle-plugin &>/dev/null; then
          if mvn checkstyle:checkstyle checkstyle:check 2>&1 | tee target/quality-reports/checkstyle-output.txt; then
            echo "✅ No checkstyle violations found" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Checkstyle issues found:" >> $GITHUB_STEP_SUMMARY
            # Extract violations from checkstyle report
            if [ -f target/checkstyle-result.xml ]; then
              VIOLATIONS=$(grep -c "violation" target/checkstyle-result.xml 2>/dev/null || echo "0")
              echo "- **Total violations:** $VIOLATIONS" >> $GITHUB_STEP_SUMMARY
              # Show first 10 violations with details
              grep "violation" target/checkstyle-result.xml | head -10 | sed 's/<violation/\n- /' | sed 's/source="\([^"]*\)"/File: \1/' | sed 's/message="\([^"]*\)"/Issue: \1/' >> $GITHUB_STEP_SUMMARY 2>/dev/null || echo "See full report in artifacts" >> $GITHUB_STEP_SUMMARY
            fi
          fi
        else
          echo "Checkstyle plugin not configured" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Run SpotBugs with detailed output
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### SpotBugs Results" >> $GITHUB_STEP_SUMMARY
        if mvn help:describe -Dplugin=com.github.spotbugs:spotbugs-maven-plugin &>/dev/null; then
          if mvn compile spotbugs:spotbugs spotbugs:check 2>&1 | tee target/quality-reports/spotbugs-output.txt; then
            echo "✅ No SpotBugs issues found" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ SpotBugs issues found:" >> $GITHUB_STEP_SUMMARY
            # Extract bug count from SpotBugs report
            if [ -f target/spotbugsXml.xml ]; then
              BUGS=$(grep -c "BugInstance" target/spotbugsXml.xml 2>/dev/null || echo "0")
              echo "- **Total bugs found:** $BUGS" >> $GITHUB_STEP_SUMMARY
              # Show bug categories
              grep "category=" target/spotbugsXml.xml | sort | uniq -c | head -5 >> $GITHUB_STEP_SUMMARY 2>/dev/null || echo "See full report in artifacts" >> $GITHUB_STEP_SUMMARY
            fi
          fi
        else
          echo "SpotBugs plugin not configured" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Enhanced compilation analysis
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Compilation Analysis" >> $GITHUB_STEP_SUMMARY
        echo "Analyzing compilation warnings and errors..." >> $GITHUB_STEP_SUMMARY
        
        # Compile with warnings enabled
        mvn clean compile -Dmaven.compiler.showWarnings=true -Dmaven.compiler.showDeprecation=true 2>&1 | tee target/quality-reports/compilation-output.txt
        
        # Extract and categorize warnings
        WARNINGS=$(grep -i "warning" target/quality-reports/compilation-output.txt | wc -l)
        ERRORS=$(grep -i "error" target/quality-reports/compilation-output.txt | wc -l)
        
        echo "- **Compilation warnings:** $WARNINGS" >> $GITHUB_STEP_SUMMARY
        echo "- **Compilation errors:** $ERRORS" >> $GITHUB_STEP_SUMMARY
        
        if [ $WARNINGS -gt 0 ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Recent warnings:**" >> $GITHUB_STEP_SUMMARY
          grep -i "warning" target/quality-reports/compilation-output.txt | head -5 | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
        fi
        
        # PMD analysis if configured
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### PMD Analysis" >> $GITHUB_STEP_SUMMARY
        if mvn help:describe -Dplugin=org.apache.maven.plugins:maven-pmd-plugin &>/dev/null; then
          if mvn pmd:pmd pmd:check 2>&1 | tee target/quality-reports/pmd-output.txt; then
            echo "✅ No PMD violations found" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ PMD issues found - see artifacts for details" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "PMD plugin not configured" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Code coverage summary if available
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Code Coverage Summary" >> $GITHUB_STEP_SUMMARY
        if [ -f target/site/jacoco/index.html ]; then
          # Extract coverage percentage from JaCoCo report
          COVERAGE=$(grep -o "Total[^%]*%" target/site/jacoco/index.html | tail -1 | grep -o "[0-9]*%" || echo "Unknown")
          echo "- **Line Coverage:** $COVERAGE" >> $GITHUB_STEP_SUMMARY
        else
          echo "JaCoCo coverage report not found" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ Code quality analysis completed" >> $GITHUB_STEP_SUMMARY
        echo "📁 Detailed reports available in artifacts" >> $GITHUB_STEP_SUMMARY
    
    - name: Upload code quality reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: code-quality-reports
        path: |
          target/quality-reports/
          target/checkstyle-result.xml
          target/spotbugsXml.xml
          target/pmd.xml
          target/site/jacoco/
        retention-days: 30
        if-no-files-found: warn

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [build, fast-security-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: wallet-service-jar
        path: target/
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        echo "## 🐳 Docker Build Results" >> $GITHUB_STEP_SUMMARY
        
        # Build the Docker image
        docker build -t wallet-service:latest .
        
        # Get image info
        docker images wallet-service:latest --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}\t{{.CreatedAt}}" >> $GITHUB_STEP_SUMMARY
        
        echo "✅ Docker image built successfully" >> $GITHUB_STEP_SUMMARY
        
    - name: Test Docker container
      run: |
        echo "### Container Health Check" >> $GITHUB_STEP_SUMMARY
        
        # Start container in background
        docker run -d --name wallet-test -p 8080:8080 wallet-service:latest
        
        # Wait for startup
        sleep 30
        
        # Check if container is running
        if docker ps | grep wallet-test; then
          echo "✅ Container started successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Container failed to start" >> $GITHUB_STEP_SUMMARY
          docker logs wallet-test >> $GITHUB_STEP_SUMMARY
        fi
        
        # Cleanup
        docker stop wallet-test || true
        docker rm wallet-test || true

  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: wallet-service-jar
        path: target/
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build and start service
      run: |
        # Build and start the service
        docker build -t wallet-service:test .
        docker run -d --name wallet-perf-test -p 8080:8080 wallet-service:test
        
        # Wait for service to be ready
        echo "Waiting for service to start..."
        timeout 120 bash -c 'until curl -f http://localhost:8080/actuator/health; do sleep 2; done'
        
    - name: Run performance tests
      run: |
        echo "## ⚡ Performance Test Results" >> $GITHUB_STEP_SUMMARY
        
        # Install Apache Bench if not available
        sudo apt-get update && sudo apt-get install -y apache2-utils
        
        # Simple load test on health endpoint
        echo "### Health Endpoint Performance" >> $GITHUB_STEP_SUMMARY
        ab -n 100 -c 10 http://localhost:8080/actuator/health | grep -A 10 "Requests per second" >> $GITHUB_STEP_SUMMARY || echo "Performance test failed" >> $GITHUB_STEP_SUMMARY
        
        # Test wallet endpoints if available (adjust URLs as needed)
        if curl -f http://localhost:8080/api/wallets &>/dev/null; then
          echo "### API Endpoint Performance" >> $GITHUB_STEP_SUMMARY
          ab -n 50 -c 5 -H "Content-Type: application/json" http://localhost:8080/api/wallets | grep -A 5 "Requests per second" >> $GITHUB_STEP_SUMMARY || echo "API performance test failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "✅ Performance tests completed" >> $GITHUB_STEP_SUMMARY
        
    - name: Cleanup performance test
      if: always()
      run: |
        docker stop wallet-perf-test || true
        docker rm wallet-perf-test || true

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, build, security-scan, code-quality, docker-build]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    permissions:
      contents: write
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: wallet-service-jar
        path: artifacts/
        
    - name: Set up Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        
    - name: Generate version and create release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Generate version based on date and commit
        VERSION="v$(date +%Y.%m.%d)-$(git rev-parse --short HEAD)"
        TAG_NAME="$VERSION"
        RELEASE_NAME="Digital Wallet Service $VERSION"
        
        echo "Creating release: $RELEASE_NAME"
        echo "Tag: $TAG_NAME"
        
        # Create release notes
        cat > release_notes.md << EOF
        # Digital Wallet Service Release $VERSION
        
        ## Changes in this release
        
        ### Recent commits:
        $(git log --oneline -10 --pretty=format:"- %s (%h)")
        
        ## Build Information
        - **Build Date**: $(date)
        - **Commit**: $(git rev-parse HEAD)
        - **Branch**: $(git branch --show-current)
        - **Java Version**: ${{ env.JAVA_VERSION }}
        
        ## Artifacts
        - JAR file: wallet-service-*.jar
        
        ## Security
        - Security scan completed ✅
        - Dependencies checked ✅
        
        ## Testing
        - Unit tests passed ✅
        - Integration tests passed ✅
        
        ---
        
        **Full Changelog**: https://github.com/${{ github.repository }}/compare/$(git describe --tags --abbrev=0 2>/dev/null || echo "HEAD~10")...$TAG_NAME
        
        See [CHANGELOG.md](CHANGELOG.md) for detailed changes.
        EOF
        
        # Check if release already exists
        if gh release view "$TAG_NAME" >/dev/null 2>&1; then
          echo "Release $TAG_NAME already exists, updating..."
          gh release edit "$TAG_NAME" \
            --title "$RELEASE_NAME" \
            --notes-file release_notes.md
        else
          echo "Creating new release $TAG_NAME..."
          gh release create "$TAG_NAME" \
            --title "$RELEASE_NAME" \
            --notes-file release_notes.md \
            --target master
        fi
        
        # Upload JAR artifact
        if [ -f artifacts/*.jar ]; then
          echo "Uploading JAR artifact..."
          gh release upload "$TAG_NAME" artifacts/*.jar --clobber
        else
          echo "⚠️ No JAR artifacts found to upload"
        fi

  notification:
    name: Notification
    runs-on: ubuntu-latest
    needs: [test, build, fast-security-scan, code-quality, docker-build]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.test.result == 'success' && needs.build.result == 'success' }}
      run: |
        echo "✅ Pipeline completed successfully!"
        echo "- Tests: ${{ needs.test.result }}"
        echo "- Build: ${{ needs.build.result }}"
        echo "- Fast Security: ${{ needs.fast-security-scan.result }}"
        echo "- Code Quality: ${{ needs.code-quality.result }}"
        echo "- Docker: ${{ needs.docker-build.result }}"
        
    - name: Notify on failure
      if: ${{ needs.test.result == 'failure' || needs.build.result == 'failure' }}
      run: |
        echo "❌ Pipeline failed!"
        echo "- Tests: ${{ needs.test.result }}"
        echo "- Build: ${{ needs.build.result }}"
        echo "Please check the logs and fix the issues."
        exit 1